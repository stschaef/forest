\title{Intrinsic Verification of Parsers and Formal Grammar Theory in Dependent Lambek Calculus}
\taxon{reference}
\author{stevenschaefer}
\author{maxsnew}
\author{pedrohaamorim}
\author{nathanvarner}
\meta{external}{https://github.com/maxsnew/grammars-and-semantic-actions}

\p{
  We present Dependent Lambek Calculus, a domain-specific dependent
  type theory for verified parsing and formal grammar theory. In
  Dependent Lambek Calculus, linear types are used as a syntax for formal grammars,
  and parsers can be written as linear terms. The linear typing
  restriction provides a form of intrinsic verification that a parser
  yields only valid parse trees for the input string. We demonstrate
  the expressivity of this system by showing that the combination of
  inductive linear types and dependency on non-linear data can be used
  to encode commonly used grammar formalisms such as regular and
  context-free grammars as well as traces of various types of
  automata. Using these encodings, we define parsers for regular
  expressions using deterministic automata, as well as
  examples of verified parsers of context-free grammars.

  We present a denotational semantics of our type theory that
  interprets the types as a mathematical notion of formal
  grammars. Based on this denotational semantics, we have made a
  prototype implementation of Dependent Lambek Calculus using a shallow embedding in
  the Agda proof assistant. All of our examples parsers have been
  implemented in this prototype implementation.
}

\p{
  Read the preprint [here](https://stevenschaefer.net/intrinsic-verification-of-parsers.pdf).
}
