% ["references"]
\title{Architecture-Preserving Provable Repair of Deep Neural Networks}
\date{2023-06-06}
\author/literal{Zhe Tao}\author/literal{Stephanie Nawas}\author/literal{Jacqueline Mitchell}\author/literal{Aditya V. Thakur}
\taxon{reference}
\meta{doi}{10.1145/3591238}
\meta{external}{https://dl.acm.org/doi/10.1145/3591238}

\tag{machinelearning}
\tag{machinelearningverification}

\meta{bibtex}{\startverb
@article{taoArchitecturePreservingProvableRepair2023,
 title = {Architecture-{{Preserving Provable Repair}} of {{Deep Neural Networks}}},
 author = {Tao, Zhe and Nawas, Stephanie and Mitchell, Jacqueline and Thakur, Aditya V.},
 date = {2023-06-06},
 doi = {10.1145/3591238},
 url = {https://dl.acm.org/doi/10.1145/3591238},
 urldate = {2023-11-27},
 journaltitle = {Proceedings of the ACM on Programming Languages},
 volume = {7},
 pages = {443--467},
 file = {/Users/stevenschaefer/Zotero/storage/PZJLBU9Z/Tao et al. - 2023 - Architecture-Preserving Provable Repair of Deep Ne.pdf},
 langid = {english},
 issue = {PLDI},
 abstract = {Deep neural networks (DNNs) are becoming increasingly important components of software, and are considered the state-of-the-art solution for a number of problems, such as image recognition. However, DNNs are far from infallible, and incorrect behavior of DNNs can have disastrous real-world consequences. This paper addresses the problem of architecture-preserving V-polytope provable repair of DNNs. A V-polytope defines a convex bounded polytope using its vertex representation. V-polytope provable repair guarantees that the repaired DNN satisfies the given specification on the infinite set of points in the given V-polytope. An architecture-preserving repair only modifies the parameters of the DNN, without modifying its architecture. The repair has the flexibility to modify multiple layers of the DNN, and runs in polynomial time. It supports DNNs with activation functions that have some linear pieces, as well as fully-connected, convolutional, pooling and residual layers. To the best our knowledge, this is the first provable repair approach that has all of these features. We implement our approach in a tool called APRNN. Using MNIST, ImageNet, and ACAS Xu DNNs, we show that it has better efficiency, scalability, and generalization compared to PRDNN and REASSURE, prior provable repair methods that are not architecture preserving. CCS Concepts: • Computing methodologies → Neural networks; • Theory of computation → Linear programming; • Software and its engineering → Software post-development issues.},
 issn = {2475-1421},
 shortjournal = {Proc. ACM Program. Lang.}
}
\stopverb}
