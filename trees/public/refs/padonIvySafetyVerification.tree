% ["references"]
\title{Ivy: Safety verification by interactive generalization}
\date{2016-06}
\author/literal{Oded Padon}\author/literal{Kenneth L. McMillan}\author/literal{Aurojit Panda}\author/literal{Mooly Sagiv}\author/literal{Sharon Shoham}
\taxon{Reference}
\tag{distributedsystems}
\tag{inductiveinvariants}
\meta{doi}{10.1145/2980983.2908118}
\meta{external}{https://doi.org/10.1145/2980983.2908118}

\meta{bibtex}{\startverb
@article{padonIvySafetyVerification,
 title = {Ivy: safety verification by interactive generalization},
 author = {Padon, Oded and McMillan, Kenneth L. and Panda, Aurojit and Sagiv, Mooly and Shoham, Sharon},
 year = {2016},
 doi = {10.1145/2980983.2908118},
 url = {https://doi.org/10.1145/2980983.2908118},
 journal = {SIGPLAN Not.},
 volume = {51},
 number = {6},
 pages = {614â€“630},
 publisher = {Association for Computing Machinery},
 address = {New York, NY, USA},
 keywords = {counterexamples to induction, distributed systems, invariant inference, safety verification},
 numpages = {17},
 month = {June},
 abstract = {Despite several decades of research, the problem of formal verification of infinite-state systems has resisted effective automation. We describe a system --- Ivy --- for interactively verifying safety of infinite-state systems. Ivy's key principle is that whenever verification fails, Ivy graphically displays a concrete counterexample to induction. The user then interactively guides generalization from this counterexample. This process continues until an inductive invariant is found. Ivy searches for universally quantified invariants, and uses a restricted modeling language. This ensures that all verification conditions can be checked algorithmically. All user interactions are performed using graphical models, easing the user's task. We describe our initial experience with verifying several distributed protocols.},
 issn = {0362-1340},
 issue_date = {June 2016}
}
\stopverb}
