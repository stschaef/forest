[{"DOI": "10.1145/3341691", "URL": "https://doi.org/10.1145/3341691", "abstract": "Proof assistants based on dependent type theory provide expressive languages for both programming and proving within the same system. However, all of the major implementations lack powerful extensionality principles for reasoning about equality, such as function and propositional extensionality. These principles are typically added axiomatically which disrupts the constructive properties of these systems. Cubical type theory provides a solution by giving computational meaning to Homotopy Type Theory and Univalent Foundations, in particular to the univalence axiom and higher inductive types. This paper describes an extension of the dependently typed functional programming language Agda with cubical primitives, making it into a full-blown proof assistant with native support for univalence and a general schema of higher inductive types. These new primitives make function and propositional extensionality as well as quotient types directly definable with computational content. Additionally, thanks also to copatterns, bisimilarity is equivalent to equality for coinductive types. This extends Agda with support for a wide range of extensionality principles, without sacrificing type checking and constructivity.", "author": [{"family": "Vezzosi", "given": "Andrea"}, {"family": "M\u00f6rtberg", "given": "Anders"}, {"family": "Abel", "given": "Andreas"}], "container-title": "Proc. ACM Program. Lang.", "id": "VezzosiMortbergAbel2019", "issue": "ICFP", "issued": {"date-parts": [[2019, 7]]}, "keyword": "Univalence, Cubical Type Theory, Higher Inductive Types, Dependent Pattern Matching", "publisher": "Association for Computing Machinery", "publisher-place": "New York, NY, USA", "title": "Cubical agda: A dependently typed programming language with univalence and higher inductive types", "title-short": "Cubical agda", "type": "article-journal", "volume": "3", "original_bibtex": "@article{VezzosiMortbergAbel2019,\n title = {Cubical Agda: A Dependently Typed Programming Language with Univalence and Higher Inductive Types},\n author = {Vezzosi, Andrea and M\\\"{o}rtberg, Anders and Abel, Andreas},\n year = {2019},\n doi = {10.1145/3341691},\n url = {https://doi.org/10.1145/3341691},\n journal = {Proc. ACM Program. Lang.},\n volume = {3},\n number = {ICFP},\n publisher = {Association for Computing Machinery},\n address = {New York, NY, USA},\n keywords = {Univalence, Cubical Type Theory, Higher Inductive Types, Dependent Pattern Matching},\n numpages = {29},\n articleno = {87},\n month = {jul},\n abstract = {Proof assistants based on dependent type theory provide expressive languages for both programming and proving within the same system. However, all of the major implementations lack powerful extensionality principles for reasoning about equality, such as function and propositional extensionality. These principles are typically added axiomatically which disrupts the constructive properties of these systems. Cubical type theory provides a solution by giving computational meaning to Homotopy Type Theory and Univalent Foundations, in particular to the univalence axiom and higher inductive types. This paper describes an extension of the dependently typed functional programming language Agda with cubical primitives, making it into a full-blown proof assistant with native support for univalence and a general schema of higher inductive types. These new primitives make function and propositional extensionality as well as quotient types directly definable with computational content. Additionally, thanks also to copatterns, bisimilarity is equivalent to equality for coinductive types. This extends Agda with support for a wide range of extensionality principles, without sacrificing type checking and constructivity.},\n issue_date = {August 2019}\n}\n"}]