[{"abstract": "Today\u2019s distributed systems are increasingly complex, leading to subtle bugs that are difficult to detect with standard testing methods. Formal verification can provably rule out such bugs, but historically it has been excessively labor intensive. For distributed systems, recent work shows that, given a correct inductive invariant, nearly all other proof work can be automated; however, the construction of such invariants is still a difficult manual task. In this paper, we demonstrate a new methodology for automating the construction of inductive invariants, given as input a (formal) description of the distributed system and a desired safety condition. Our system performs an exhaustive search within a given space of candidate invariants in order to find and verify inductive invariants which suffice to prove the safety condition. Central to our ability to search efficiently is our algorithm\u2019s ability to learn from counterexamples whenever a candidate fails to be invariant, allowing us to check the remaining candidates more efficiently. We hypothesize that many distributed systems, even complex ones, may have concise invariants that make this approach practical, and in support of this, we show that our system is able to identify and verify inductive invariants for the Paxos protocol, which proved too complex for previous work.", "author": [{"family": "Hance", "given": "Travis"}, {"family": "Heule", "given": "Marijn"}, {"family": "Martins", "given": "Ruben"}, {"family": "Parno", "given": "Bryan"}], "id": "hanceFindingInvariantsDistributed", "issued": {"date-parts": [[2021]]}, "language": "en-US", "title": "Finding Invariants of Distributed Systems: It\u2019s a Small (Enough) World After All", "title-short": "Finding Invariants of Distributed Systems", "type": "article-journal", "original_bibtex": "@article{hanceFindingInvariantsDistributed,\n title = {Finding {{Invariants}} of {{Distributed Systems}}: {{It}}\u2019s a {{Small}} ({{Enough}}) {{World After All}}},\n author = {Hance, Travis and Heule, Marijn and Martins, Ruben and Parno, Bryan},\n date = {2021},\n file = {/Users/stevenschaefer/Zotero/storage/S77U7QUW/Hance et al. - Finding Invariants of Distributed Systems It\u2019s a .pdf},\n langid = {english},\n abstract = {Today\u2019s distributed systems are increasingly complex, leading to subtle bugs that are difficult to detect with standard testing methods. Formal verification can provably rule out such bugs, but historically it has been excessively labor intensive. For distributed systems, recent work shows that, given a correct inductive invariant, nearly all other proof work can be automated; however, the construction of such invariants is still a difficult manual task. In this paper, we demonstrate a new methodology for automating the construction of inductive invariants, given as input a (formal) description of the distributed system and a desired safety condition. Our system performs an exhaustive search within a given space of candidate invariants in order to find and verify inductive invariants which suffice to prove the safety condition. Central to our ability to search efficiently is our algorithm\u2019s ability to learn from counterexamples whenever a candidate fails to be invariant, allowing us to check the remaining candidates more efficiently. We hypothesize that many distributed systems, even complex ones, may have concise invariants that make this approach practical, and in support of this, we show that our system is able to identify and verify inductive invariants for the Paxos protocol, which proved too complex for previous work.}\n}\n"}]