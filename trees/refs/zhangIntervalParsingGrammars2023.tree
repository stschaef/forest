% ["references"]
\title{Interval Parsing Grammars for File Format Parsing}
\date{2023-06}
\author{Jialun Zhang}\author{Greg Morrisett}\author{Gang Tan}
\taxon{reference}
\tag{parsing}
\meta{doi}{10.1145/3591264}
\meta{external}{https://dl.acm.org/doi/10.1145/3591264}

\meta{bibtex}{\startverb
@article{zhangIntervalParsingGrammars2023,
 title = {Interval {Parsing} {Grammars} for {File} {Format} {Parsing}},
 author = {Zhang, Jialun and Morrisett, Greg and Tan, Gang},
 year = {2023},
 doi = {10.1145/3591264},
 url = {https://dl.acm.org/doi/10.1145/3591264},
 urldate = {2024-04-29},
 journal = {Proceedings of the ACM on Programming Languages},
 volume = {7},
 number = {PLDI},
 pages = {1073--1095},
 file = {Full Text PDF:/Users/stevenschaefer/Zotero/storage/4JNN3FNZ/Zhang et al. - 2023 - Interval Parsing Grammars for File Format Parsing.pdf:application/pdf},
 month = {June},
 language = {en},
 abstract = {File formats specify how data is encoded for persistent storage. They cannot be formalized as context-free grammars since their specifications include context-sensitive patterns such as the random access pattern and the type-length-value pattern. We propose a new grammar mechanism called Interval Parsing Grammars IPGs) for file format specifications. An IPG attaches to every nonterminal/terminal an interval, which specifies the range of input the nonterminal/terminal consumes. By connecting intervals and attributes, the context-sensitive patterns in file formats can be well handled. In this paper, we formalize IPGs' syntax as well as its semantics, and its semantics naturally leads to a parser generator that generates a recursive-descent parser from an IPG. In general, IPGs are declarative, modular, and enable termination checking. We have used IPGs to specify a number of file formats including ZIP, ELF, GIF, PE, and part of PDF; we have also evaluated the performance of the generated parsers.},
 issn = {2475-1421}
}
\stopverb}
