% ["references"]
\title{Action logic and pure induction}
\date{1991}
\author{Vaughan Pratt}
\taxon{reference}
\meta{doi}{10.1007/BFb0018436}
\meta{external}{http://link.springer.com/10.1007/BFb0018436}
\tag{kalg}

\meta{bibtex}{\startverb
@incollection{prattActionLogicPure1991,
 title = {Action logic and pure induction},
 author = {Pratt, Vaughan},
 year = {1991},
 isbn = {978-3-540-53686-4 978-3-540-46982-7},
 doi = {10.1007/BFb0018436},
 url = {http://link.springer.com/10.1007/BFb0018436},
 urldate = {2024-07-10},
 booktitle = {Logics in {AI}},
 editor = {Siekmann, J. and Goos, G. and Hartmanis, J. and Van Eijck, J.},
 volume = {478},
 pages = {97--120},
 publisher = {Springer Berlin Heidelberg},
 address = {Berlin, Heidelberg},
 file = {Pratt - 1991 - Action logic and pure induction.pdf:/Users/stevenschaefer/Zotero/storage/U7JDF77Z/Pratt - 1991 - Action logic and pure induction.pdf:application/pdf},
 note = {Series Title: Lecture Notes in Computer Science},
 language = {en},
 abstract = {In Floyd-Hoare logic, programs are dynamic while assertions are static (hold at states). In action logic the two notions become one, with programs viewed as on-the-ﬂy assertions whose truth is evaluated along intervals instead of at states. Action logic is an equational theory ACT conservatively extending the equational theory REG of regular expressions with operations preimplication a→b (had a then b) and postimplication b←a (b if-ever a). Unlike REG, ACT is ﬁnitely based, makes a∗ reﬂexive transitive closure, and has an equivalent Hilbert system. The crucial axiom is that of pure induction, (a→a)∗ = a→a.}
}
\stopverb}
