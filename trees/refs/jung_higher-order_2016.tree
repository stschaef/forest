% ["references"]
\title{Higher-order ghost state}
\date{2016-09}
\author{Ralf Jung}\author{Robbert Krebbers}\author{Lars Birkedal}\author{Derek Dreyer}
\taxon{reference}
\meta{doi}{10.1145/2951913.2951943}
\meta{external}{https://dl.acm.org/doi/10.1145/2951913.2951943}

\meta{bibtex}{\startverb
@inproceedings{jung_higher-order_2016,
 title = {Higher-order ghost state},
 author = {Jung, Ralf and Krebbers, Robbert and Birkedal, Lars and Dreyer, Derek},
 year = {2016},
 isbn = {978-1-4503-4219-3},
 doi = {10.1145/2951913.2951943},
 url = {https://dl.acm.org/doi/10.1145/2951913.2951943},
 urldate = {2024-11-14},
 booktitle = {Proceedings of the 21st {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
 series = {{ICFP} 2016},
 pages = {256--269},
 publisher = {Association for Computing Machinery},
 address = {New York, NY, USA},
 file = {Full Text PDF:/Users/maxsnew/Zotero/storage/T7F4GFGD/Jung et al. - 2016 - Higher-order ghost state.pdf:application/pdf},
 month = {September},
 abstract = {The development of concurrent separation logic (CSL) has sparked a long line of work on modular verification of sophisticated concurrent programs. Two of the most important features supported by several existing extensions to CSL are higher-order quantification and custom ghost state. However, none of the logics that support both of these features reap the full potential of their combination. In particular, none of them provide general support for a feature we dub "higher-order ghost state": the ability to store arbitrary higher-order separation-logic predicates in ghost variables.  In this paper, we propose higher-order ghost state as a interesting and useful extension to CSL, which we formalize in the framework of Jung et al.'s recently developed Iris logic. To justify its soundness, we develop a novel algebraic structure called CMRAs ("cameras"), which can be thought of as "step-indexed partial commutative monoids". Finally, we show that Iris proofs utilizing higher-order ghost state can be effectively formalized in Coq, and discuss the challenges we faced in formalizing them.}
}
\stopverb}
